package i5.las2peer.services.noracle-Space-Service;


import java.net.HttpURLConnection;

import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.Consumes;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.MediaType;

import com.fasterxml.jackson.core.JsonProcessingException;

import i5.las2peer.api.Service;
import i5.las2peer.api.Context;
import i5.las2peer.restMapper.RESTService;
import i5.las2peer.restMapper.annotations.ServicePath;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Contact;
import io.swagger.annotations.Info;
import io.swagger.annotations.License;
import io.swagger.annotations.SwaggerDefinition;
import org.json.simple.*;
 

/**
 *
 * Noracle-Space-Service
 *
 * This microservice was generated by the CAE (Community Application Editor). If you edit it, please
 * make sure to keep the general structure of the file and only add the body of the methods provided
 * in this main file. Private methods are also allowed, but any "deeper" functionality should be
 * outsourced to (imported) classes.
 *
 */
@ServicePath("space")
public class Noracle-Space-Service extends RESTService {





  public Noracle-Space-Service() {
	super();
    // read and set properties values
    setFieldValues();

  }

  @Override
  public void initResources() {
	getResourceConfig().register(RootResource.class);
  }

  // //////////////////////////////////////////////////////////////////////////////////////
  // REST methods
  // //////////////////////////////////////////////////////////////////////////////////////

  @Api
  @SwaggerDefinition(
      info = @Info(title = "Noracle-Space-Service", version = "0.1",
          description = "A las2peer microservice generated by the CAE.",
          termsOfService = "none",
          contact = @Contact(name = "", email = "CAEAddress@gmail.com") ,
          license = @License(name = "BSD",
              url = "https://github.com/CAE-Community-Application-Editor/microservice-Noracle-Space-Service/blob/master/LICENSE.txt") ) )
  @Path("/")
  public static class RootResource {

    private final Noracle-Space-Service service = (Noracle-Space-Service) Context.getCurrent().getService();

      /**
   * 
   * getSpace
   * 
   * @param spaceId a JSONObject 
   * 
   * @return Response  
   * 
   */
  @GET
  @Path("//getSpace")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.TEXT_PLAIN)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_OK, message = "spaceData")
  })
  @ApiOperation(value = "getSpace", notes = " ")
  public Response getSpace(String spaceId) {
    JSONObject spaceId_JSON = (JSONObject) JSONValue.parse(spaceId);

    // spaceData
    boolean spaceData_condition = true;
    if(spaceData_condition) {
      JSONObject result = new JSONObject();
      return Response.status(HttpURLConnection.HTTP_OK).entity(result.toJSONString()).build();
    }
    return null;
  }

  /**
   * 
   * createSpace
   * 
   * @param spaceData a JSONObject 
   * 
   * @return Response  
   * 
   */
  @POST
  @Path("//createSpace")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.TEXT_PLAIN)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_OK, message = "spaceCreated")
  })
  @ApiOperation(value = "createSpace", notes = " ")
  public Response createSpace(String spaceData) {
    JSONObject spaceData_JSON = (JSONObject) JSONValue.parse(spaceData);

    // spaceCreated
    boolean spaceCreated_condition = true;
    if(spaceCreated_condition) {
      JSONObject result = new JSONObject();
      return Response.status(HttpURLConnection.HTTP_OK).entity(result.toJSONString()).build();
    }
    return null;
  }



  }

  // //////////////////////////////////////////////////////////////////////////////////////
  // Service methods (for inter service calls)
  // //////////////////////////////////////////////////////////////////////////////////////
  
  

}
